name: "encoding-test"

on:
  push:
    branches: 
      - main
      - release-**
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    #The branches below must be a subset of the branches above
    branches: 
      - main
      - release-**
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:

jobs:
  encoding-test:
    runs-on: [self-hosted, daily-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set Variable
        id: vars
        run: |
          echo ::set-output name=META_URL::sqlite3:///tmp/encoding-test.db
          echo ::set-output name=META_URL2::sqlite3:///tmp/encoding-test2.db
          echo ::set-output name=MOUNT_POINT::/tmp/juicefs-encoding-test
          echo ::set-output name=MOUNT_POINT2::/tmp/juicefs-encoding-test2

      - name: Build linux target
        run: |
          export GOPATH=/usr/local/go
          export HOME=/root
          make juicefs
          mv juicefs jfs_new
          echo juicefs new version: $(./jfs_new -V)

      - name: Init
        run: |
          if [ -d ${{ steps.vars.outputs.MOUNT_POINT }} ]; then
            ./jfs_new umount ${{ steps.vars.outputs.MOUNT_POINT }} || true
          fi
          UUID=$(./jfs_new status ${{ steps.vars.outputs.META_URL }} | grep UUID | cut -d '"' -f 4)
          if [ -n "$UUID" ];then
            echo UUID is: $UUID
            sudo ./jfs_new destroy --force ${{ steps.vars.outputs.META_URL }} $UUID
          fi
          if [ -d ${{ steps.vars.outputs.MOUNT_POINT2 }} ]; then
            ./jfs_new umount ${{ steps.vars.outputs.MOUNT_POINT2 }} || true
          fi
          UUID=$(./jfs_new status ${{ steps.vars.outputs.META_URL2 }} | grep UUID | cut -d '"' -f 4)
          if [ -n "$UUID" ];then
            echo UUID is: $UUID
            sudo ./jfs_new destroy --force ${{ steps.vars.outputs.META_URL2 }} $UUID
          fi

      - name: Encoding Test
        run: |
          filename=果%汁\"数\\据😊.txt
          dirname=果%汁\"数\\据😊
          attr_key=user.k
          attr_value_set=果%汁\"数\\据😊AttrValue
          data_write="果%汁\"数\\据😊DataToWrite"
          soft_link=果%汁\"数\\据😊softlink
          hard_link=果%汁\"数\\据😊hardlink

          ./jfs_new format ${{steps.vars.outputs.META_URL}} myjfs
          ./jfs_new mount --enable-xattr ${{steps.vars.outputs.META_URL}}  ${{steps.vars.outputs.MOUNT_POINT}} -d 
          touch ${{steps.vars.outputs.MOUNT_POINT}}/$filename && echo $data_write>${{steps.vars.outputs.MOUNT_POINT}}/$filename
          mkdir ${{steps.vars.outputs.MOUNT_POINT}}/$dirname
          setfattr -n $attr_key -v  $attr_value_set ${{steps.vars.outputs.MOUNT_POINT}}/$filename
          ln -s ${{steps.vars.outputs.MOUNT_POINT}}/$filename ${{steps.vars.outputs.MOUNT_POINT}}/$soft_link
          ln ${{steps.vars.outputs.MOUNT_POINT}}/$filename ${{steps.vars.outputs.MOUNT_POINT}}/$hard_link

          ./jfs_new dump ${{steps.vars.outputs.META_URL}} utf8.dump
          iconv -f UTF-8 -t GBK utf8.dump > gbk.dump
          if [ -f /tmp/utf8_to_gbk.db ]; then 
            rm -rf /tmp/utf8_to_gbk.db
          fi
          ./jfs_new load sqlite3:///tmp/utf8_to_gbk.db gbk.dump
          ./jfs_new dump sqlite3:///tmp/utf8_to_gbk.db gbk.dump2
          iconv -f GBK -t UTF-8 gbk.dump2 > utf8.dump2
          ./jfs_new load ${{steps.vars.outputs.META_URL2}}  utf8.dump2
          ./jfs_new mount --enable-xattr ${{steps.vars.outputs.META_URL2}} ${{steps.vars.outputs.MOUNT_POINT2}} -d

          if [ ! -d "${{steps.vars.outputs.MOUNT_POINT2}}/$dirname" ]; then 
            echo "Fatal: directory does not exist", ${{steps.vars.outputs.MOUNT_POINT2}}/$dirname
            exit 1
          fi
          if [ ! -f "${{steps.vars.outputs.MOUNT_POINT2}}/$filename" ]; then 
            echo "Fatal: file does not exist: ", ${{steps.vars.outputs.MOUNT_POINT2}}/$filename
            exit 1
          fi
          data_read=$(cat ${{steps.vars.outputs.MOUNT_POINT2}}/$filename)
          if [ "$data_write" != "$data_read" ]; then
            echo "Fatal: data read is not the same as data write:", $data_write, "data read:", $data_read
            exit 1
          fi

          if [ ! -f ${{steps.vars.outputs.MOUNT_POINT2}}/$soft_link ]; then 
            echo "Fatal: soft link does not exist: ", ${{steps.vars.outputs.MOUNT_POINT2}}/$soft_link
            exit 1
          fi

          if [ ! -f ${{steps.vars.outputs.MOUNT_POINT2}}/$hard_link ]; then 
            echo "Fatal: hard link does not exist: ", ${{steps.vars.outputs.MOUNT_POINT2}}/$hard_link
            exit 1
          fi

          attr_get=$(getfattr -e text -n $attr_key ${{steps.vars.outputs.MOUNT_POINT2}}/$filename | grep "$attr_key" | awk -F= '{print $2}' |  sed 's/^.\(.*\).$/\1/' | sed 's/\\\\/\\/g' | sed 's/\\"/"/g' )
          if [ "$attr_get" != "$attr_value_set" ]; then
            echo "set and get attr error":, $attr_get, "is not equal to " $attr_value_set
            exit 1
          fi
            
      - name: Clean
        if: always() 
        run: |
          if [ -d ${{ steps.vars.outputs.MOUNT_POINT }} ]; then
            ./jfs_new umount ${{ steps.vars.outputs.MOUNT_POINT }} || true
          fi
          UUID=$(./jfs_new status ${{ steps.vars.outputs.META_URL }} | grep UUID | cut -d '"' -f 4)
          if [ -n "$UUID" ];then
            echo UUID is: $UUID
            sudo ./jfs_new destroy --force ${{ steps.vars.outputs.META_URL }} $UUID
          fi
          if [ -d ${{ steps.vars.outputs.MOUNT_POINT2 }} ]; then
            ./jfs_new umount ${{ steps.vars.outputs.MOUNT_POINT2 }} || true
          fi
          UUID=$(./jfs_new status ${{ steps.vars.outputs.META_URL2 }} | grep UUID | cut -d '"' -f 4)
          if [ -n "$UUID" ];then
            echo UUID is: $UUID
            sudo ./jfs_new destroy --force ${{ steps.vars.outputs.META_URL2 }} $UUID
          fi

      - name: Send Slack Notification
        if: ${{ failure() }}
        uses: juicedata/slack-notify-action@main
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID_FOR_PR_CHECK_NOTIFY }}"
          slack_bot_token: "${{ secrets.SLACK_BOT_TOKEN }}"  